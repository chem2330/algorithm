def solution(board):
    INF = 100000000000000  # 절대 안 나올 큰 값을 저장해줌
    N = len(board)
    arr = [[[INF] * 4 for _ in range(N)] for _ in range(N)]  # 3차원 배열 arr[x][y][direction]
    arr[0][0][0] = arr[0][0][1] = arr[0][0][2] = arr[0][0][3] = 0  # 첫 위치 비용 0으로 저장해둠
    stack = []
    if board[0][1] == 0:  # 처음에 오른쪽으로 간 것
        stack.append([0, 1, 0])
        arr[0][1][0] = 100  # 비용 100
    if board[1][0] == 0:  # 처음에 아래로 간 것
        stack.append([1, 0, 1])
        arr[1][0][1] = 100  # 비용 100
    while stack:
        x, y, direc = stack.pop()
        for i, d_xy in enumerate([[0, 1], [1, 0], [-1, 0], [0, -1]]):  # i는 방향
            dx, dy = d_xy
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N and board[nx][ny] == 0:  # 범위 안에 들어오고, 벽이 아니라면
                if i == direc:  # 직선거리라면
                    if arr[x][y][direc] + 100 < arr[nx][ny][i]:  # +100해서 그 값이 더 낮으면
                        arr[nx][ny][i] = arr[x][y][direc] + 100  # 값 교체
                        stack.append([nx, ny, i])  # 스택에 추가

                else:
                    if arr[x][y][direc] + 600 < arr[nx][ny][i]:  # +600해서 그 값이 더 낮으면
                        arr[nx][ny][i] = arr[x][y][direc] + 600  # 값 교체
                        stack.append([nx, ny, i])  # 스택에 추가
    answer = min(arr[-1][-1])  # 마지막 값 중에 방향 상관없이 가장 작은거 찾기
    return answer